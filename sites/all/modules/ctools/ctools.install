<?php
// $Id: ctools.install,v 1.6 2009/02/14 20:24:10 merlinofchaos Exp $

/**
 * @file
 * Contains install and update functions for ctools.
 */

/**
 * Implementation of hook_install()
 */
function ctools_install() {
  drupal_install_schema('ctools');
}

/**
 * Implementation of hook_uninstall()
 */
function ctools_uninstall() {
  drupal_uninstall_schema('ctools');
}

/**
 * Implementation of hook_schemea
 */
function ctools_schema() {
  // Currently, schema 1 is the only schema we have. As we make updates,
  // we might either create a new schema 2 or make adjustments here.
  return ctools_schema_2();
}

/**
 * Version 2 of the CTools schema.
 */
function ctools_schema_2() {
  $schema = ctools_schema_1();

  // update the 'name' field to be 128 bytes long:
  $schema['ctools_object_cache']['fields']['name']['length'] = 128;

  // DO NOT MODIFY THIS TABLE -- this definition is used to create the table.
  // Changes to this table must be made in schema_3 or higher.
  $schema['ctools_css_cache'] = array(
    'description' => t('A special cache used to store CSS that must be non-volatile.'),
    'fields' => array(
      'cid' => array(
        'type' => 'varchar',
        'length' => '128',
        'description' => t('The CSS ID this cache object belongs to.'),
        'not null' => TRUE,
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => t('The filename this CSS is stored in.'),
      ),
      'css' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => t('CSS being stored.'),
        'serialize' => TRUE,
      ),
      'filter' => array(
         'type' => 'int',
         'size' => 'tiny',
         'description' => t('Whether or not this CSS needs to be filtered.'),
       ),
    ),
    'primary key' => array('cid'),
  );

  return $schema;
}

/**
 * CTools' initial schema; separated for the purposes of updates.
 *
 * DO NOT MAKE CHANGES HERE. This schema version is locked.
 */
function ctools_schema_1() {
  $schema['ctools_object_cache'] = array(
    'description' => t('A special cache used to store objects that are being edited; it serves to save state in an ordinarily stateless environment.'),
    'fields' => array(
      'sid' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => t('The session ID this cache object belongs to.'),
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '32',
        'description' => t('The name of the object this cache is attached to.'),
      ),
      'obj' => array(
        'type' => 'varchar',
        'length' => '32',
        'description' => t('The type of the object this cache is attached to; this essentially represents the owner so that several sub-systems can use this cache.'),
      ),
      'updated' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The time this cache was created or updated.'),
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => t('Serialized data being stored.'),
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'sid_obj_name' => array('sid', 'obj', 'name'),
      'updated' => array('updated'),
    ),
  );
  return $schema;
}

/**
 * Enlarge the ctools_object_cache.name column to prevent truncation and weird
 * errors.
 */
function ctools_update_6001() {
  $ret = array();

  // Perform updates like this to reduce code duplication.
  $schema = ctools_schema_2();

  db_change_field($ret, 'ctools_object_cache', 'name', 'name', $schema['ctools_object_cache']['fields']['name']);

  return $ret;
}

/**
 * Add the new css cache table.
 */
function ctools_update_6002() {
  $ret = array();

  // Schema 2 is locked and should not be changed.
  $schema = ctools_schema_2();

  db_create_table($ret, 'ctools_css_cache', $schema['ctools_css_cache']);
  return $ret;
}
