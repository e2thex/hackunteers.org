<?php
// $Id: panels_mini.module,v 1.5.2.4 2009/03/26 21:31:33 merlinofchaos Exp $

/**
 * @file panels_mini.module
 *
 * This module provides mini panels which are basically panels that can be
 * used within blocks or other panels.
 */

/**
 * Implementation of hook_perm().
 */
function panels_mini_perm() {
  return array('create mini panels', 'administer mini panels');
}

/**
 * Implementation of hook_menu().
 */
function panels_mini_menu() {
  require_once drupal_get_path('module', 'panels_mini') . '/panels_mini.admin.inc';
  return _panels_mini_menu();
}

// ---------------------------------------------------------------------------
// Allow the rest of the system access to mini panels

/**
 * Implementation of hook_block().
 *
 * Expose qualifying mini panels to Drupal's block system.
 */
function panels_mini_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks = array();

    $minis = panels_mini_load_all();
    foreach ($minis as $panel_mini) {
      if (empty($mini->disabled) && empty($mini->requiredcontext)) {
        $blocks[$panel_mini->pid] = array(
          'info' => t('Mini panel: "@title"', array('@title' => $panel_mini->title)),
        );
      }
    }

    return $blocks;
  }
  elseif ($op == 'view') {
    $panel_mini = panels_mini_load($delta);
    ctools_include('context');
    $panel_mini->context = $panel_mini->display->context = ctools_context_load_contexts($panel_mini);
    $panel_mini->display->css_id = panels_mini_get_id($panel_mini->name);

    $block = array(
      'subject' => $panel_mini->title,
      'content' => panels_render_display($panel_mini->display),
    );
    return $block;
  }
}

/**
 * Statically store all used IDs to ensure all mini panels get a unique id.
 */
function panels_mini_get_id($name) {
  static $id_cache = array();

  $id = 'mini-panel-' . $name;
  if (!empty($id_cache[$name])) {
    $id .= "-" . $id_cache[$name]++;
  }
  else {
    $id_cache[$name] = 1;
  }

  return $id;
}

// ---------------------------------------------------------------------------
// Database functions.

/**
 * Create a new page with defaults appropriately set from schema.
 */
function panels_mini_new() {
  ctools_include('export');
  return ctools_export_new_object('panels_mini');
}

/**
 * Load a single mini panel.
 */
function panels_mini_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('panels_mini', 'names', array($name));
  if (isset($result[$name])) {
    $result[$name]->display = panels_load_display($result[$name]->did);
    return $result[$name];
  }
}

/**
 * Load all mini panels.
 */
function panels_mini_load_all() {
  ctools_include('export');
  $minis = ctools_export_load_object('panels_mini');
  $dids = array();
  foreach ($minis as $mini) {
    $dids[$mini->did] = $mini->name;
  }

  $displays = panels_load_displays(array_keys($dids));
  foreach ($displays as $did => $display) {
    $minis[$dids[$did]]->display = $display;
  }

  return $minis;
}

/**
 * Write a mini panel to the database.
 */
function panels_mini_save(&$mini) {
  if (!empty($panel_mini->display)) {
    $display = panels_save_display($panel_mini->display);
    $panel_mini->did = $display->did;
  }

  $update = (isset($mini->pid)) ? array('pid') : array();
  drupal_write_record('panels_mini', $mini, $update);

  return $mini;
}

/**
 * Remove a mini panel.
 */
function panels_mini_delete($mini) {
  db_query("DELETE FROM {panels_mini} WHERE name = '%s'", $mini->name);
  db_query("DELETE FROM {blocks} WHERE module = 'panels_mini' AND delta = %d", $panel_mini->pid);
  return panels_delete_display($panel_mini->did);
}

/**
 * Export a mini panel.
 */
function panels_mini_export($mini, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('panels_mini', $mini, $indent);
  // Export the primary display
  $display = !empty($mini->display) ? $mini->display : panels_load_display($mini->did);
  $output .= panels_export_display($display, $indent);
  $output .= $indent . '$mini->display = $display' . ";\n";
  return $output;
}

/**
 * Remove the block version of mini panels from being available content types.
 */
function panels_mini_panels_block_info($module, $delta, &$info) {
  $info = NULL;
}

/**
 * Implementation of hook_panels_exportables().
 */
function panels_mini_panels_exportables($op = 'list', $panels = NULL, $name = 'foo') {
  static $all_panels = NULL;
  if ($op == 'list') {
    if (empty($all_panels)) {
      $all_panels = panels_mini_load_all();
    }

    foreach ($all_panels as $name => $panel) {
      $return[$name] = check_plain($name) . ' (' . check_plain($panel->title) . ')';
    }
    return $return;
  }

  if ($op == 'export') {
    $code = "/**\n";
    $code .= " * Implementation of hook_default_panel_minis()\n";
    $code .= " */\n";
    $code .= "function " . $name . "_default_panel_minis() {\n";
    foreach ($panels as $panel => $truth) {
      $code .= panels_mini_export($all_panels[$panel], '  ');
      $code .= '  $minis[\'' . check_plain($panel) . '\'] = $mini;' . "\n\n\n";
    }
    $code .= "  return \$minis;\n";
    $code .= "}\n";
    return $code;
  }
}

/**
 * Menu callback to check to see if a mini panel is valid as part
 * of a path, and if it is, return the mini.
 */
function panels_mini_admin_load($name) {
  $mini = panels_mini_load($name);
  if ($mini && empty($mini->disabled)) {
    return $mini;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function panels_mini_ctools_plugin_directory($module, $plugin) {
  if ($module == 'panels' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}
