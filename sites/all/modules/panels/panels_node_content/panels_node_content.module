<?php
// $Id: panels_node_content.module,v 1.5.2.1 2009/03/26 23:11:56 merlinofchaos Exp $


/**
 * @file panels_node_content.module
 *
 * This module exposes nodes directly to the add content interface.
 * The context system provided by the main panel module is a much more powerful
 * replacement for this simple, yet deprecated method.
 */

/**
 * Implementation of hook_menu().
 */
function panels_node_content_menu() {
  $items['admin/panels/node-content'] = array(
    'title' => 'Node panes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'panels_node_content_admin',
    'description' => 'Information about the content node content type.',
  );
  return $items;
}

/**
 * Page callback for the very short admin page.
 */
function panels_node_content_admin() {
  $output = '<p>';
  $output .= t('Panels node panes does not have a normal administrative UI, such as panels pages or mini panels. With this module, users may add a node directly to a panel via the add content interface. They may then select this node using an auto-complete field. In general, this method of adding nodes to panes should be considered deprecated (especially by module developers implementing the Panels API) and is only retained to support updating sites that use this older method. Moving forward, it is recommended that the context system be used to embed nodes, as that is far more powerful and interesting.');
  $output .= t('However, certain modules which make use of Panels are dependent on this method of getting node context (often without the developer even being aware of it), so it is important to emphasize that you CAN leave this module enabled without negatively impacting your site.');
  $output .= '</p>';
  return $output;
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function panels_node_content_ctools_plugin_directory($module, $plugin) {
  if ($module == 'panels' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}
